### WSG Evaluation API Test
@baseUrl = http://localhost:8000

### API 상태 확인
GET {{baseUrl}}/
Accept: application/json

### WSG 평가 요청 - example.com
POST {{baseUrl}}/wsg/evaluate
Content-Type: application/json

{
    "url": "https://example.com",
    "options": {
        "include_screenshots": false,
        "depth": 1
    }
}

### WSG 평가 요청 - W3C
POST {{baseUrl}}/wsg/evaluate
Content-Type: application/json

{
    "url": "https://www.w3.org/",
    "options": {
        "include_screenshots": false,
        "depth": 1
    }
}

### 평가 상태 확인 (request_id를 실제 ID로 교체하세요)
GET {{baseUrl}}/wsg/status/wsg_eval_20250426_123456_0
Accept: application/json

### Python 테스트 스크립트
@python_script = """
import asyncio
import aiohttp
import json
from datetime import datetime

async def test_wsg_api():
    async with aiohttp.ClientSession() as session:
        # 1. API 상태 확인
        async with session.get('http://localhost:8000/') as response:
            print('API Status:', response.status)
            print(await response.json())
        
        # 2. WSG 평가 요청
        test_urls = [
            'https://example.com',
            'https://www.w3.org/'
        ]
        
        for url in test_urls:
            print(f'\nTesting URL: {url}')
            
            # 평가 요청
            payload = {
                'url': url,
                'options': {
                    'include_screenshots': False,
                    'depth': 1
                }
            }
            
            async with session.post('http://localhost:8000/wsg/evaluate', json=payload) as response:
                result = await response.json()
                print('Evaluation Request:', response.status)
                print(json.dumps(result, indent=2))
                
                if 'request_id' in result:
                    request_id = result['request_id']
                    
                    # 결과가 준비될 때까지 상태 확인
                    for _ in range(10):  # 최대 10번 시도
                        await asyncio.sleep(2)  # 2초 대기
                        
                        async with session.get(f'http://localhost:8000/wsg/status/{request_id}') as status_response:
                            status = await status_response.json()
                            print(f'Status Check ({request_id}):', status['status'])
                            
                            if status['status'] in ['completed', 'failed']:
                                print(json.dumps(status, indent=2))
                                break

if __name__ == '__main__':
    asyncio.run(test_wsg_api())
"""
